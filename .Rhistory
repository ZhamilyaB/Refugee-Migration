install.packages("readr")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, fig.width = 8, fig.height = 6)
library(dplyr)
library(plotly)
library(readr)
library(ggplot2)
install.packages("plotly")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, fig.width = 8, fig.height = 6)
library(dplyr)
library(plotly)
system("ls ../input", intern=TRUE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, fig.width = 8, fig.height = 6)
library(dplyr)
library(plotly)
#system("ls ../input", intern=TRUE)
AA  <- read.csv("../input/affirmative_asylum.csv")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, fig.width = 8, fig.height = 6)
library(dplyr)
library(plotly)
#system("ls ../input", intern=TRUE)
AA  <- read.csv("affirmative_asylum.csv")
AS <- read.csv("asylum_statistics.csv")
DA <- read.csv("defensive_asylum.csv")
RS <- read.csv("refugee_statistics.csv")
Rsa <- read.csv("refugee_status.csv")
names(AA) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
names(DA) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
names(Rsa) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
AA1 <- AA[AA$Country == "Total",]
AA <- AA[!AA$Country == "Total",]
DA1 <- DA[DA$Country == "Total",]
DA <- DA[!DA$Country == "Total",]
Rsa1 <- Rsa[!Rsa$Country == "Total",]
Rsa <- Rsa[!Rsa$Country == "Total",]
getwd()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, fig.width = 8, fig.height = 6)
library(dplyr)
library(plotly)
#system("ls ../input", intern=TRUE)
AA  <- read.csv("affirmative_asylum.csv")
AS <- read.csv("asylum_statistics.csv")
DA <- read.csv("defensive_asylum.csv")
RS <- read.csv("refugee_statistics.csv")
Rsa <- read.csv("refugee_status.csv")
names(AA) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
names(DA) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
names(Rsa) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
AA1 <- AA[AA$Country == "Total",]
AA <- AA[!AA$Country == "Total",]
DA1 <- DA[DA$Country == "Total",]
DA <- DA[!DA$Country == "Total",]
Rsa1 <- Rsa[!Rsa$Country == "Total",]
Rsa <- Rsa[!Rsa$Country == "Total",]
q <- AA[, c(1,2)]
w <- AA[, c(1,3)]
e <- AA[, c(1,4)]
r <- AA[, c(1,5)]
t <- AA[, c(1,6)]
y <- AA[, c(1,7)]
u <- AA[, c(1,8)]
i <- AA[, c(1,9)]
o <- AA[, c(1,10)]
p <- AA[, c(1,11)]
k <- c("Country", "NumberofRefugee", "year" )
q$year <- 2006
names(q) <- k
w$year <- 2007
names(w) <- k
e$year <- 2008
names(e) <- k
r$year <- 2009
names(r) <- k
t$year <- 2010
names(t) <- k
y$year <- 2011
names(y) <- k
u$year <- 2012
names(u) <- k
i$year <- 2013
names(i) <- k
o$year <- 2014
names(o) <- k
p$year <- 2015
names(p) <- k
a <- rbind(q,w,e,r,t,y,u,i,o,p)
s <- as.data.frame(a)
s$year <- as.factor(s$year)
s <- s[!s$NumberofRefugee == "D" & !s$NumberofRefugee == "X" & !s$NumberofRefugee == "-" & !s$NumberofRefugee == "", ]
s$NumberofRefugee <- as.numeric(gsub(",", "" , s$NumberofRefugee))
d <- s
q <- DA[, c(1,2)]
w <- DA[, c(1,3)]
e <- DA[, c(1,4)]
r <- DA[, c(1,5)]
t <- DA[, c(1,6)]
y <- DA[, c(1,7)]
u <- DA[, c(1,8)]
i <- DA[, c(1,9)]
o <- DA[, c(1,10)]
p <- DA[, c(1,11)]
k <- c("Country", "NumberofRefugee", "year" )
q$year <- 2006
names(q) <- k
w$year <- 2007
names(w) <- k
e$year <- 2008
names(e) <- k
r$year <- 2009
names(r) <- k
t$year <- 2010
names(t) <- k
y$year <- 2011
names(y) <- k
u$year <- 2012
names(u) <- k
i$year <- 2013
names(i) <- k
o$year <- 2014
names(o) <- k
p$year <- 2015
names(p) <- k
a <- rbind(q,w,e,r,t,y,u,i,o,p)
s <- as.data.frame(a)
s$year <- as.factor(s$year)
s <- s[!s$NumberofRefugee == "D" & !s$NumberofRefugee == "X" & !s$NumberofRefugee == "-" & !s$NumberofRefugee == "", ]
s$NumberofRefugee <- as.numeric(gsub(",", "" , s$NumberofRefugee))
d1 <- s
q <- Rsa[, c(1,2)]
w <- Rsa[, c(1,3)]
e <- Rsa[, c(1,4)]
r <- Rsa[, c(1,5)]
t <- Rsa[, c(1,6)]
y <- Rsa[, c(1,7)]
u <- Rsa[, c(1,8)]
i <- Rsa[, c(1,9)]
o <- Rsa[, c(1,10)]
p <- Rsa[, c(1,11)]
k <- c("Country", "NumberofRefugee", "year" )
q$year <- 2006
names(q) <- k
w$year <- 2007
names(w) <- k
e$year <- 2008
names(e) <- k
r$year <- 2009
names(r) <- k
t$year <- 2010
names(t) <- k
y$year <- 2011
names(y) <- k
u$year <- 2012
names(u) <- k
i$year <- 2013
names(i) <- k
o$year <- 2014
names(o) <- k
p$year <- 2015
names(p) <- k
a <- rbind(q,w,e,r,t,y,u,i,o,p)
s <- as.data.frame(a)
s$year <- as.factor(s$year)
s <- s[!s$NumberofRefugee == "D" & !s$NumberofRefugee == "X" & !s$NumberofRefugee == "-" & !s$NumberofRefugee == "", ]
s$NumberofRefugee <- as.numeric(gsub(",", "" , s$NumberofRefugee))
d2 <- s
plot1 <- plot_ly(d, x = ~Country, y = ~(NumberofRefugee), color = ~year , type = "bar" ) %>% layout(title = "Rufugees ( affirmative_asylum)" , barmode = 'relative')
plot2 <- plot_ly(d1, x = ~Country, y = ~(NumberofRefugee), color = ~year , type = "bar" ) %>% layout(title = "Rufugees ( Defensive_asylum)" , barmode = 'relative')
plot3 <- plot_ly(d2, x = ~Country, y = ~(NumberofRefugee), color = ~year , type = "bar" ) %>% layout(title = "Rufugees ( Refugee_status_asylum)" , barmode = 'relative')
plot1
library(forecast)
library(lambda.tools)
library(futile.logger)
do_forecast <- function(country, df, h=2, plot=FALSE) {
flog.info("[%s] start", country)
xs <- as.numeric(colnames(df))
xs <- c(xs, max(xs) + (1:h))
ys <- as.numeric(df[country,])
fc <- forecast(ys, h=h)
if (plot) plot(fc)
id <- sprintf("%s.%s", country, tail(xs,h))
data.frame(Id=id, Prediction=as.numeric(fc$mean))
}
df <- read.csv('training.csv', row.names=1)
colnames(df) <- sub('X','', colnames(df), fixed=TRUE)
out <- fold(rownames(df), function(i,acc) rbind(acc, do_forecast(i,df)), NULL)
```
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, fig.width = 8, fig.height = 6)
library(dplyr)
library(plotly)
AA  <- read.csv("affirmative_asylum.csv")
AS <- read.csv("asylum_statistics.csv")
DA <- read.csv("defensive_asylum.csv")
RS <- read.csv("refugee_statistics.csv")
Rsa <- read.csv("refugee_status.csv")
names(AA) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
names(DA) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
names(Rsa) <- c("Country" , "2006","2007","2008","2009","2010", "2011", "2012", "2013","2014", "2015")
AA1 <- AA[AA$Country == "Total",]
AA <- AA[!AA$Country == "Total",]
DA1 <- DA[DA$Country == "Total",]
DA <- DA[!DA$Country == "Total",]
Rsa1 <- Rsa[!Rsa$Country == "Total",]
Rsa <- Rsa[!Rsa$Country == "Total",]
## world's Refugees count {.tabset}
plot1 <- ggplot(d, aes(year, NumberofRefugee, fill = NumberofRefugee ))+ geom_bar(stat = "identity")+ggtitle("No. of Refugees yearly(Affirmative_asylum")+scale_fill_gradient(low = "yellow" , high = "red")
plot2 <- ggplot(d1, aes(year, NumberofRefugee, fill = NumberofRefugee ))+ geom_bar(stat = "identity")+ggtitle("No. of Refugees yearly(Defensive_asylum)")+scale_fill_gradient(low = "yellow" , high = "green")
plot3 <- ggplot(d2, aes(year, NumberofRefugee, fill = NumberofRefugee ))+ geom_bar(stat = "identity")+ggtitle("No. of Refugees yearly(Refugee_status")+scale_fill_gradient(low = "yellow" , high = "blue")
plot1
America <- d2[d2$Country %in% c("North America","South America"),]
NorthA <- d2[d2$Country %in% c("North America"),]
SouthA <- d2[d2$Country %in% c("South America"),]
plot4 <- ggplot(America, aes(year, NumberofRefugee, color = year ))+geom_line()+geom_point()+ggtitle("Refugees count in America")+theme(legend.position = "bottom")+scale_y_continuous(breaks = seq(0, 5000, 500))
plot5 <- ggplot(SouthA, aes(year, NumberofRefugee, color = year ))+geom_line()+geom_point()+ggtitle("Refugees count in South America")+theme(legend.position = "bottom")+scale_y_continuous(breaks = seq(0, 500, 50))
plot6 <- ggplot(NorthA, aes(year, NumberofRefugee, color = year ))+geom_line()+geom_point()+ggtitle("Refugees count in North America")+theme(legend.position = "bottom")+scale_y_continuous(breaks = seq(0, 5000, 500))
plot4
View(df)
install.packages("gridExtra")
install.packages("RColorBrewer")
library(RColorBrewer)
library(ggthemes)
library(reshape2)
install.packages("ggthemes")
#load packages and csv file
library(ggplot2)
library(dplyr)
library(gridExtra)
library(RColorBrewer)
library(ggthemes)
library(reshape2)
#load packages and csv file
library(ggplot2)
library(dplyr)
library(gridExtra)
library(RColorBrewer)
library(ggthemes)
library(reshape2)
rs1<-read.csv('refugee_status.csv',stringsAsFactors=F,sep=',')
#rename columns
colnames(rs1)<-c('Continent.Country.of.Nationality','Y2006','Y2007','Y2008','Y2009','Y2010','Y2011','Y2012','Y2013','Y2014','Y2015')
#function to convert (and impute) the char. to num.
convertCols<-function(x){
convertNum <- function(y){
if(grepl("-",y)==TRUE){
return(as.numeric(gsub("-","0",y)))
}
else if(grepl(",",y)==TRUE){
return(as.numeric(gsub(",","",y)))
}
else{
return(as.numeric(y))
}
}
sapply(x,convertNum)
}
df2 <- data.frame(cbind(
rs1 %>% dplyr::select(Continent.Country.of.Nationality),
rs1 %>%
dplyr::select(-Continent.Country.of.Nationality) %>%
dplyr::mutate_all(funs(convertCols))))
df3<-data.frame(reshape2::melt(df2,id=c('Continent.Country.of.Nationality')))
head(df3)
continent<-c('Africa','Asia','Europe','North America','Oceania','South America')
perContinent<-data.frame(df3 %>% dplyr::filter(Continent.Country.of.Nationality %in% continent))
#list all countries and filter the continent names
countries_name<-unique(df3$Continent.Country.of.Nationality)
countries_name<-countries_name[!countries_name %in% c(continent,'Other','Unknown','Total')]
getGeo<-function(x,coord){
for(i in 1:length(x)){
val<-as.numeric(geocode(as.character(x[i])))[coord]
return(val)
}
}
#library(ggmap)
countries_name<-data.frame(countries_name)
#countries_name$long<-sapply(countries_name$countries_name,getGeo,1)
#countries_name$lat<-sapply(countries_name$countries_name,getGeo,2)
countries_name$long<-c(67.70995,17.87389,45.03819,47.57693,27.95339,90.4336,17.67908,95.95597,29.91889,104.991,12.35472,20.93944,18.73221,104.1954,-74.29733,21.75866,15.82766,-5.54708,-77.78117,30.8025,10.26789,39.78233,40.48967,-15.31014,-82.90008,-72.28521,-86.24191,113.9213,53.68805,43.67929,36.23841,66.92368,37.90619,127.5101,47.48177,74.7661,102.4955,24.60319,-9.429499,-10.94083,28.36989,84.12401,8.675277,69.34512,105.3188,29.87389,21.00586,-11.77989,46.19962,31.30698,80.7718,30.21764,38.99681,0.824782,32.29028,31.16558,64.58526,108.2772,48.51639,29.15486)
countries_name$lat<-c(3.93911,-11.20269,40.0691,40.1431,53.70981,27.51416,43.91589,21.91622,-3.373056,12.56568,7.369722,6.611111,15.45417,35.86166,4.570868,-4.038333,-0.228021,7.539989,21.52176,26.82055,1.650801,15.17938,9.145,13.44318,32.16562,18.97119,15.2,-0.789275,32.42791,33.22319,30.58516,48.01957,-0.023559,40.33985,29.31166,41.20438,19.85627,56.87964,6.428055,21.00789,47.41163,28.39486,9.081999,30.37532,61.52401,-1.940278,44.01652,8.460555,5.152149,6.876992,7.873054,12.86281,34.80207,8.619543,1.373333,48.37943,41.37749,14.05832,15.55273,-19.01544)
head(countries_name)
countries_map <-map_data("world")
install.packages("maps")
library(maps)
countries_map <-map_data("world")
world_map<-ggplot() +
geom_map(data = countries_map,
map = countries_map,aes(x = long, y = lat, map_id = region, group = group),
fill = "white", color = "black", size = 0.1)
mapPlot<-list()
histPlot<-list()
years<-unique(df3$variable)
length(years)
for(i in 1:length(years)){
curYear<-years[i]
#selection and merging
curDf<-data.frame(merge(
df3 %>% mutate(countries_name = Continent.Country.of.Nationality) %>% dplyr::filter(!(countries_name %in% c(continent,'Other','Unknown','Total')) & variable==curYear),
countries_name, by='countries_name'))
#percentage calculation
curDf<-curDf %>% mutate(tot = sum(value,na.rm=T), percentage = round(100*(value/tot),2))
#make map
mapPlot[[i]]<-world_map +
geom_curve(data = filter(curDf,value>0),aes(x=long,y=lat,xend=-95.71289,yend=37.09024,size=percentage,color=percentage),alpha=.5) +
theme_fivethirtyeight() + theme(
plot.title=element_text(face="bold",hjust=.012,vjust=.8,colour="#3C3C3C",size=10),
panel.grid.major = element_blank(),
axis.text=element_blank(),axis.ticks=element_blank(),
legend.position = c(.1,0.15),
legend.title=element_text(size=8),
legend.text=element_text(size=8),legend.key.size = unit(.4, "cm")) +
scale_color_gradientn(colours=rev(brewer.pal(10,'Spectral'))) + guides(size=F) +
ggtitle(paste0('Countries of origin of refugees for ',curYear))
histPlot[[i]]<-ggplot() +
geom_bar(data=filter(perContinent,variable!=curYear),aes(x=variable,y=value,fill=Continent.Country.of.Nationality),stat='identity',alpha=.25) +
geom_bar(data=filter(perContinent,variable==curYear),aes(x=variable,y=value,fill= Continent.Country.of.Nationality),stat='identity',alpha=1) +
theme_fivethirtyeight() +
theme(
legend.text=element_text(size=8),
legend.key.size = unit(.4, "cm"),
legend.position=,axis.text.x = element_text(size=8,angle=45)) +
scale_fill_brewer(name='',palette='Set1')
}
grid.arrange(
mapPlot[[1]],histPlot[[1]],
mapPlot[[2]],histPlot[[2]],
mapPlot[[3]],histPlot[[3]],
mapPlot[[4]],histPlot[[4]],
mapPlot[[5]],histPlot[[5]],
mapPlot[[6]],histPlot[[6]],
mapPlot[[7]],histPlot[[7]],
mapPlot[[8]],histPlot[[8]],
mapPlot[[9]],histPlot[[9]],
mapPlot[[10]],histPlot[[10]],
ncol=2, nrow=10,
widths=c(3, 1),heights=c(2,2,2,2,2,2,2,2,2,2))
perCountries<-df2 %>% dplyr::filter(!( Continent.Country.of.Nationality %in% c(continent,'Other','Unknown','Total')))
perCountries$Tot<-rowSums(perCountries[,2:11],na.rm=T)
perCountries <- perCountries %>% mutate(tot = sum(Tot,na.rm=T), percentage = round(100*(Tot/tot),2),countries_name=Continent.Country.of.Nationality)
perCountries <- merge(perCountries, countries_name, by='countries_name')
allmaps<-world_map +
geom_curve(data = filter(perCountries,Tot>0),aes(x=long,y=lat,xend=-95.71289,yend=37.09024,size=percentage,color=percentage),alpha=.5) +
theme_fivethirtyeight() +
theme(panel.grid.major = element_blank(),
axis.text=element_blank(),axis.ticks=element_blank(),
legend.position = c(.1,0.15)) +
scale_color_gradientn(colours=rev(brewer.pal(10,'Spectral'))) + guides(size=F)
allyears <-ggplot() +
geom_bar(data=perContinent,aes(x=variable,y=value,fill= Continent.Country.of.Nationality),stat='identity',alpha=1) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(size=8,angle=45),legend.text=element_text(size=8),
legend.key.size = unit(.4, "cm")) + scale_fill_brewer(name='',palette='Set1')
grid.arrange(allmaps, allyears,ncol=2, nrow=1, widths=c(3, 1),heights=c(2))
